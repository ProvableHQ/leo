namespace: Compile
expectation: Pass
outputs:
- - compile:
    - initial_symbol_table: d5ea2324dee9fefc1c1266aa3984173753649bfe5c3b90ecc38c1e9923a278a0
      type_checked_symbol_table: cd4b664d03514db45cebcbd9ba62b3403d49fb498838e73352e87cd7558d8cb7
      unrolled_symbol_table: cd4b664d03514db45cebcbd9ba62b3403d49fb498838e73352e87cd7558d8cb7
      initial_ast: 0f32aead0f48227cb0c4c01f6e034c16e83b58c285fb02fda1b651389e6003b5
      unrolled_ast: 0f32aead0f48227cb0c4c01f6e034c16e83b58c285fb02fda1b651389e6003b5
      ssa_ast: 1eff92c09f76a87a712c3540266c67df2968a2a12c079d341fc42f1faf2024a9
      flattened_ast: c113938b5453ce9cf9d0ff583dcb084cc04118f15f461708656790b729507054
      destructured_ast: 99c38f533a47ea79eb51d501c8848b37001a6a84035802405ad535dac8cf990a
      inlined_ast: 99c38f533a47ea79eb51d501c8848b37001a6a84035802405ad535dac8cf990a
      dce_ast: 99c38f533a47ea79eb51d501c8848b37001a6a84035802405ad535dac8cf990a
      bytecode: |
        program test.aleo;

        record Token:
            owner as address.private;
            amount as u64.private;

        function mint_token:
            input r0 as address.private;
            input r1 as u64.private;
            input r2 as field.private;
            hash.psd2 r2 into r3 as field;
            is.eq 7202470996857839225873911078012225723419856133099120809866608931983814353616field r3 into r4;
            cast r0 r1 into r5 as Token.record;
            cast r0 0u64 into r6 as Token.record;
            ternary r4 r5.owner r6.owner into r7;
            ternary r4 r5.amount r6.amount into r8;
            cast r7 r8 into r9 as Token.record;
            output r9 as Token.record;

        function mint_token2:
            input r0 as address.private;
            input r1 as u64.private;
            input r2 as field.private;
            hash.psd2 r2 into r3 as field;
            is.eq 7202470996857839225873911078012225723419856133099120809866608931983814353616field r3 into r4;
            cast r0 r1 into r5 as Token.record;
            cast r0 0u64 into r6 as Token.record;
            ternary r4 r5.owner r6.owner into r7;
            ternary r4 r5.amount r6.amount into r8;
            cast r7 r8 into r9 as Token.record;
            output r9 as Token.record;
      errors: ''
      warnings: ''
