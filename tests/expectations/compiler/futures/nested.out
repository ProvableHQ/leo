namespace: Compile
expectation: Pass
outputs:
- - compile:
    - initial_symbol_table: 0fbe7b86610386bfb1c7f0f211b2043baae706b9195008f8553511968f9297e7
      type_checked_symbol_table: efc3324af11b2f3645010266f1a871d799b81b07bec594fa88402b3f6fe1330b
      unrolled_symbol_table: efc3324af11b2f3645010266f1a871d799b81b07bec594fa88402b3f6fe1330b
      initial_ast: 472f984ad224e345de6a6a8cb7c4986b0bf8fa288713c38a506b41bad280faa5
      unrolled_ast: 472f984ad224e345de6a6a8cb7c4986b0bf8fa288713c38a506b41bad280faa5
      ssa_ast: ff6501ea72e6a46b15d71a89b71181851fba9aa2e6ee2a36d70218ad1a089a68
      flattened_ast: ba4154876562575fc3f8b6106a3ed4ab331382a4538ebc9630c82ed9be48176b
      destructured_ast: a995365c129f150bc361a571e5a0810f014a62c170d39e904b7de473bcdac50f
      inlined_ast: 3a2f11285208b9bd75048be921a23504d9389ae81e2bdc96f631943cfa4349c6
      dce_ast: ed19a1a5455d89e6a59914923e69d600b0fde7fa91cae652d70756eb59365e03
      bytecode: |
        program test_dep.aleo;

        record yeets:
            owner as address.private;
            val as u32.private;

        mapping Yo:
            key as u32.public;
            value as u32.public;

        function main_dep:
            input r0 as u32.private;
            async main_dep r0 1u32 into r1;
            cast self.caller 1u32 into r2 as yeets.record;
            output r2 as yeets.record;
            output r1 as test_dep.aleo/main_dep.future;

        finalize main_dep:
            input r0 as u32.public;
            input r1 as u32.public;
            set r1 into Yo[r0];
      errors: ''
      warnings: ''
    - initial_symbol_table: 837e6e9f7a93af9d92cb90208d54a4e55693939bccddf588c94102805a600ec2
      type_checked_symbol_table: c33e10eabb14d2d0dc8a7ffd7370dcda4d0467b46dc00d9a526c0cf7fc373906
      unrolled_symbol_table: c33e10eabb14d2d0dc8a7ffd7370dcda4d0467b46dc00d9a526c0cf7fc373906
      initial_ast: 64089bd9ecc0ab9ce224328c7ba9b2ece577f585b2417b48eb0883ec8cec304c
      unrolled_ast: 450bb73f7249477591a716a45cbd0fbb332d98a8765b2804ca919488cbc7e1bf
      ssa_ast: d445e67098ada41b7ada11f69a07acf107d1b8e6ab052e7bb3e8d1b6530c4371
      flattened_ast: b3e5d4d940f433b770b6acdd85c2a5f1de7327617f71783b75108c2a515c12a1
      destructured_ast: 36361778b1d97dcde52548c1e082ad7382dbe6e6be4fd6be1fdc73bb213d0016
      inlined_ast: b358e9fa7f234ae1154b48cbd83c3e2029c1a83c5298470035729f78537e03a6
      dce_ast: 4d6d5c792f8d7a9d83e0c1bee6efcf24470e92fd4746aa7a9d0afabc93ec8a19
      bytecode: |
        import test_dep.aleo;
        program test.aleo;

        mapping ayo:
            key as u32.public;
            value as u32.public;

        function main:
            input r0 as u32.private;
            call test_dep.aleo/main_dep 10u32 into r1 r2;
            call test_dep.aleo/main_dep 1u32 into r3 r4;
            async main r2 r4 1u32 into r5;
            add r2[0u32] r4[0u32] into r6;
            add r6 1u32 into r7;
            add r7 r2[0u32] into r8;
            mul r2[0u32] 2u32 into r9;
            add r8 r9 into r10;
            output r10 as u32.private;
            output r5 as test.aleo/main.future;

        finalize main:
            input r0 as test_dep.aleo/main_dep.future;
            input r1 as test_dep.aleo/main_dep.future;
            input r2 as u32.public;
            is.eq r2 1u32 into r3;
            branch.eq r3 false to end_then_0_0;
            await r0;
            await r1;
            branch.eq true true to end_otherwise_0_1;
            position end_then_0_0;
            position end_otherwise_0_1;
            is.eq r2 2u32 into r4;
            branch.eq r4 false to end_then_0_2;
            set 1u32 into ayo[1u32];
            branch.eq true true to end_otherwise_0_3;
            position end_then_0_2;
            position end_otherwise_0_3;
            add r0[0u32] r1[0u32] into r5;
            set r5 into ayo[1u32];
      errors: ''
      warnings: "Warning [WTYC0372000]: Not all paths through the function await all futures. 2/4 paths contain at least one future that is never awaited.\n    --> compiler-test:17:5\n     |\n  17 |     async function finalize_main(f: Future, f2: Future, a: u32) {\n  18 |         // f.await();\n  19 |         if a == 1u32 {\n  20 |             Future::await(f);\n  21 |             f2.await();\n  22 |         }\n  23 | \n  24 |         if a == 2u32 {\n  25 |             //f2.await();\n  26 |             Mapping::set(ayo, 1u32, 1u32);\n  27 |         }\n  28 | \n  29 |         let total: u32 = f.0 + f2.0;\n  30 |         Mapping::set(ayo, 1u32, total);\n  31 |     }\n     |     ^\n     |\n     = Ex: `f.await()` to await a future. Remove this warning by including the `--disable-conditional-branch-type-checking` flag."
    - initial_symbol_table: 11d73259b527776fa2019508fa961ca24850cc2bd0fbbcebfb7310c565289560
      type_checked_symbol_table: fb91e05612819b16dc6a1fb37cd80f776918dc1f502feca4d9428f42dc21754d
      unrolled_symbol_table: fb91e05612819b16dc6a1fb37cd80f776918dc1f502feca4d9428f42dc21754d
      initial_ast: 05de2b0dcfd85ec6446f4507492e26b2093e771f44c497f92a24d6fff5e8c864
      unrolled_ast: 4f09dae0678393afc3cbc5592159df83ca22b947084d3c8e779281724d07a2ca
      ssa_ast: 0cb5c531ad471909089716ef6c7382fb3fcbb82dafb6edef541e4f7cff4fb8ba
      flattened_ast: 46d54d4d9fe36538d34ac306780262ee1f54a6141aa2281ef7ae74ffcf4dddcf
      destructured_ast: 88653b95656b6f56872d7ea452491322e4c122909879b72856b891c474aa8342
      inlined_ast: 0f81029815dec13a526530eeea0e92e6eb61313421ce5a7b46ed3739d62beaf6
      dce_ast: 6b852bcf601b323678eea14e096f49c72f8800d18ec811b00c31817daf630d63
      bytecode: |
        import test_dep.aleo;
        import test.aleo;
        program wrapper.aleo;

        function main:
            input r0 as u32.public;
            input r1 as u32.private;
            call test.aleo/main 1u32 into r2 r3;
            call test.aleo/main 1u32 into r4 r5;
            call test.aleo/main 1u32 into r6 r7;
            async main r3 r5 r7 into r8;
            output r2 as u32.private;
            output r8 as wrapper.aleo/main.future;

        finalize main:
            input r0 as test.aleo/main.future;
            input r1 as test.aleo/main.future;
            input r2 as test.aleo/main.future;
            await r0;
            await r1;
            await r2;
      errors: ''
      warnings: ''
    - initial_symbol_table: 04a3a0ccbf4ed061d19da4e624725caff0e64ac838498cbd09df865f4f9044f2
      type_checked_symbol_table: 69550e476553614e01dd39df0b3a8f682556cdf76982503af0e6a77d4916e027
      unrolled_symbol_table: 69550e476553614e01dd39df0b3a8f682556cdf76982503af0e6a77d4916e027
      initial_ast: bf4f5dac2e3cac6f6c8b117a93b7bc9a4b9d31f66b3b0d946866da23003e6a69
      unrolled_ast: a1786c230d46f3b207f118aaaaea373cd1d9935aa7e63b99e403a8faf36df2fe
      ssa_ast: 82581ca24afcd79d3e3c1346009981d4a9d3d227afc0540707b6c315ecdce107
      flattened_ast: 2ff2d69c6199a5c70a8ffb96d8dc0529f6f1fbf631a1f690169d2d9162e91689
      destructured_ast: 8da4c7c91fabf5edb6768e616f223e574b3415c848321f66ad9e587b76259210
      inlined_ast: a740025e070d37bd22f264e37dfd6802eb9e1b10c12c928a08acd14fbe9043d6
      dce_ast: e127a5223a49f123398009b927e96ebb44f266df7271feb7b1ff5f7f748e6ff5
      bytecode: |
        import test_dep.aleo;
        import test.aleo;
        import wrapper.aleo;
        program big_wrapper.aleo;

        function main:
            input r0 as u32.public;
            input r1 as u32.private;
            call wrapper.aleo/main 10u32 10u32 into r2 r3;
            async main r3 into r4;
            output r4[0u32][0u32][0u32][0u32] as u32.private;
            output r4 as big_wrapper.aleo/main.future;

        finalize main:
            input r0 as wrapper.aleo/main.future;
            await r0;
      errors: ''
      warnings: ''
