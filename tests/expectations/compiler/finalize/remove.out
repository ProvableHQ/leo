namespace: Compile
expectation: Pass
outputs:
- - compile:
    - initial_symbol_table: 15158cf85896dafc3e0c9cb94aa57345abb8a8f312e24e64e90139add6bb8e27
      type_checked_symbol_table: c138b4bb11d2357415cd41f6f73d7edd79a18efc4321c03e8eac164f653b7d9f
      unrolled_symbol_table: c138b4bb11d2357415cd41f6f73d7edd79a18efc4321c03e8eac164f653b7d9f
      initial_ast: cf664e610f551b077107f0332ed7bac0af8eedb7f19af5d6b02268ffcee79f2c
      unrolled_ast: cf664e610f551b077107f0332ed7bac0af8eedb7f19af5d6b02268ffcee79f2c
      ssa_ast: f2a36ba1e48e02660a5f08263f04965838c8993a9123438b21db04a2be45776d
      flattened_ast: 0b4d93229669f3d0e75fedcbd34e0d137f5aea6ed0bcca6a71fefa9846a0943f
      destructured_ast: 04b2b47f767f04f77b5889d629e9dba247a52b35b9942e156ddf569146ec2cf3
      inlined_ast: 5dbe95e8ad433806c35808bab4737d80e143cbb6513597c24d036bae7892fecd
      dce_ast: 5dbe95e8ad433806c35808bab4737d80e143cbb6513597c24d036bae7892fecd
      bytecode: |
        program test.aleo;

        mapping balances:
            key as address.public;
            value as u32.public;

        function foo:
            async foo self.caller into r0;
            output r0 as test.aleo/foo.future;

        finalize foo:
            input r0 as address.public;
            set 1u32 into balances[r0];
            contains balances[r0] into r1;
            assert.eq r1 true;
            remove balances[r0];
            contains balances[r0] into r2;
            not r2 into r3;
            assert.eq r3 true;
      errors: ''
      warnings: ''
