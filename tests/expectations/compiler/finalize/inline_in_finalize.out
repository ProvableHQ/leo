namespace: Compile
expectation: Pass
outputs:
- - compile:
    - initial_symbol_table: fb0001d10766e1e80dae4bf99d04f55b665a1c2aacad45bb2119a196421c4b34
      type_checked_symbol_table: caed000f9d2ac04c9ed3021e0e0be005e82ed3b203802f5776b6d347725d57e1
      unrolled_symbol_table: caed000f9d2ac04c9ed3021e0e0be005e82ed3b203802f5776b6d347725d57e1
      initial_ast: 6053f22b3880d8dcaa68bfc5c9a885dd3731183dc51347d9ef635f14d2d6e261
      unrolled_ast: 6053f22b3880d8dcaa68bfc5c9a885dd3731183dc51347d9ef635f14d2d6e261
      ssa_ast: 7237836e0866d3a5c1dcf508cca22b22eaa3d76e4a16bcc107cac703b054a083
      flattened_ast: 7856e0c4a21f29b3ff944903934344623f72620a473645e506aeba14ddde65d9
      destructured_ast: 12c1feb1b13fd0ec9708c0608324bdf334c5a4dbaf221c539b44f24cdec08a26
      inlined_ast: 6c54ef2fa42d781945f378dad07a0fd6051983477dbcbe2d3f792962d750ef77
      dce_ast: 6c54ef2fa42d781945f378dad07a0fd6051983477dbcbe2d3f792962d750ef77
      bytecode: |
        program test.aleo;

        function public_adder:
            input r0 as u8.public;
            input r1 as u8.public;
            async public_adder r0 r1 into r2;
            output r2 as test.aleo/public_adder.future;

        finalize public_adder:
            input r0 as u8.public;
            input r1 as u8.public;
            assert.neq r0 r1;
            add r0 r1 into r2;
            assert.neq r2 0u8;
      errors: ''
      warnings: ''
