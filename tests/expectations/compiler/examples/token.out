namespace: Compile
expectation: Pass
outputs:
- - compile:
    - initial_symbol_table: 8177e627a92d25f99122bb67b846cb21a98d38ec1a3df6bc48765113e814de49
      type_checked_symbol_table: 544a9d535b04db44d4054ffd9120d6fa48f31e4300f657ecd78b109d5a325124
      unrolled_symbol_table: 544a9d535b04db44d4054ffd9120d6fa48f31e4300f657ecd78b109d5a325124
      initial_ast: 2f8d55ea61fa7fb52258aaefa5571ecf1c200b18e4d4b59139682c3c31c17f2b
      unrolled_ast: 2f8d55ea61fa7fb52258aaefa5571ecf1c200b18e4d4b59139682c3c31c17f2b
      ssa_ast: 5337c07ebb026dacba7cdf0eea8bcfd0139aac6c55b48c1c9ff75e79e9e7f332
      flattened_ast: 28aa94e6823d7626c58140ce27cef1019a12aab8f89be54dd7eefdaf8885769d
      destructured_ast: 466205d5e4e8326dc655be74eabdb284a2c3836430cd881c7e96f6826fe4d215
      inlined_ast: cfb86cdbfc0965637504ba9bd5a251dd9da2fd656e779d3fbb139e421370cd0b
      dce_ast: cfb86cdbfc0965637504ba9bd5a251dd9da2fd656e779d3fbb139e421370cd0b
      bytecode: |
        program token.aleo;

        record token:
            owner as address.private;
            amount as u64.private;

        mapping account:
            key as address.public;
            value as u64.public;

        function mint_public:
            input r0 as address.public;
            input r1 as u64.public;
            async mint_public r0 r1 into r2;
            output r2 as token.aleo/mint_public.future;

        finalize mint_public:
            input r0 as address.public;
            input r1 as u64.public;
            get.or_use account[r0] 0u64 into r2;
            add r2 r1 into r3;
            set r3 into account[r0];

        function mint_private:
            input r0 as address.private;
            input r1 as u64.private;
            cast r0 r1 into r2 as token.record;
            output r2 as token.record;

        function transfer_public:
            input r0 as address.public;
            input r1 as u64.public;
            async transfer_public self.caller r0 r1 into r2;
            output r2 as token.aleo/transfer_public.future;

        finalize transfer_public:
            input r0 as address.public;
            input r1 as address.public;
            input r2 as u64.public;
            get.or_use account[r0] 0u64 into r3;
            sub r3 r2 into r4;
            set r4 into account[r0];
            get.or_use account[r1] 0u64 into r5;
            add r5 r2 into r6;
            set r6 into account[r1];

        function transfer_private:
            input r0 as token.record;
            input r1 as address.private;
            input r2 as u64.private;
            sub r0.amount r2 into r3;
            cast r0.owner r3 into r4 as token.record;
            cast r1 r2 into r5 as token.record;
            output r4 as token.record;
            output r5 as token.record;

        function transfer_private_to_public:
            input r0 as token.record;
            input r1 as address.public;
            input r2 as u64.public;
            sub r0.amount r2 into r3;
            cast r0.owner r3 into r4 as token.record;
            async transfer_private_to_public r1 r2 into r5;
            output r4 as token.record;
            output r5 as token.aleo/transfer_private_to_public.future;

        finalize transfer_private_to_public:
            input r0 as address.public;
            input r1 as u64.public;
            get.or_use account[r0] 0u64 into r2;
            add r2 r1 into r3;
            set r3 into account[r0];

        function transfer_public_to_private:
            input r0 as address.public;
            input r1 as u64.public;
            cast r0 r1 into r2 as token.record;
            async transfer_public_to_private self.caller r1 into r3;
            output r2 as token.record;
            output r3 as token.aleo/transfer_public_to_private.future;

        finalize transfer_public_to_private:
            input r0 as address.public;
            input r1 as u64.public;
            get.or_use account[r0] 0u64 into r2;
            sub r2 r1 into r3;
            set r3 into account[r0];
      errors: ''
      warnings: ''
