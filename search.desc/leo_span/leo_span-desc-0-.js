searchState.loadedDescShard("leo_span", 0, "The source map provides an address space for positions in …\nDefines the <code>Span</code> type used to track where code comes from.\nProvides custom serialize/deserialize implementations for …\nAny sort of description for a source.\nA file name.\nFile / Line / Column information on a <code>BytePos</code>.\nIdentifies an offset of a multi-byte character in a …\nA real file.\nA single source in the <code>SourceMap</code>.\nThe source map containing all recorded sources, methods to …\nActual data of the source map. We use this setup for …\nDetailed information on a <code>Span</code>.\nFinds all newlines, multi-byte characters, and non-narrow …\nConverts an absolute <code>BytePos</code> to a <code>CharPos</code> relative to the …\nThe number of bytes, <code>&gt;= 2</code>.\nThe (0-based) column offset into the line.\nReturns contents of a <code>span</code> assumed to be within the given …\nReturns the source contents that is spanned by <code>span</code>.\nReturns a dummy location.\nThe end position of this source in the <code>SourceMap</code>.\nFinds line column info about a given <code>pos</code>.\nFind the source file containing <code>pos</code>.\nFind the index for the source file containing <code>pos</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe actual source map data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the env var <code>LEO_TESTFRAMEWORK</code> not enabled?\nThe 1-based line number.\nReturns the source contents of the lines that <code>span</code> is …\nLocations of line beginnings in the source code.\nLoads the given <code>path</code> and returns a <code>SourceFile</code> for it.\nLooks up the file’s (1-based) line number and (0-based …\nFinds the line containing the given position. The return …\nLocations of multi-byte characters in the source code.\nThe name of the file that the source came from.\nCreates a new <code>SourceFile</code> given the file <code>name</code>, source …\nRegisters <code>source</code> under the given file <code>name</code>, returning a …\nReplaces <code>\\r\\n</code> with <code>\\n</code> in-place in <code>src</code>.\nNormalizes the source code and records the normalizations.\nThe absolute offset of the character in the <code>SourceMap</code>.\nRemoves UTF-8 BOM, if any.\nInformation on the original source.\nAll the source files recorded thus far.\nRetrieves the location (source file, lines, columns) on …\nReturns a displayable representation of the <code>span</code> as a …\nThe complete source code.\nThe start position of this source in the <code>SourceMap</code>.\nAttempt reserving address space for <code>size</code> number of bytes.\nThe address space below this value is currently used by …\nA byte offset.\nA character offset.\nOffsets (i.e. positions), in some units (e.g. bytes or …\nThe span type which tracks where formatted errors …\nAdd two spans (by reference) together.\nAdd two spans together. The resulting span is the smallest …\nGenerates a dummy span with all defaults. Should only be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe end (high) position of the span, exclusive. The length …\nGenerate one-component tuple structs that implement the <code>Pos</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the span a dummy?\nThe start (low) position of the span, inclusive.\nGenerate a new span from the <code>start</code>ing and <code>end</code>ing positions.\nThis visitor is used by the deserializer to unwrap mappings\nCustom deserialization to enable removing spans from enums.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe AST contains a few tuple-like enum variants that …\nThe inner interner. This construction is used to get …\nAn interned string, either prefilled “at compile time” …\nA symbol-to-string interner.\nString is constructed and stored during runtime.\nAll the globals for a compiler sessions.\nString is stored “at compile time”, i.e. prefilled.\nAn interned string.\nConvert to effectively a <code>&amp;&#39;static str</code> given the …\nConverts this symbol to the raw index.\nA helper for <code>symbols</code> defined below. The macro’s job is …\nCreates the session globals and then runs the closure <code>f</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the corresponding string for the given symbol.\nInterns <code>string</code>, returning a <code>Symbol</code> corresponding to it.\nMaps a string to its interned representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>Symbol</code> for the given <code>index</code>.\nReturns an interner prefilled with <code>init</code>.\nReturns an interner prefilled with commonly used strings …\nRegistration of strings and symbol index allocation is …\nThe source map used in the compiler.\nA helper for <code>symbols</code> defined below. The macro’s job is …\nThe interner for <code>Symbol</code>s used in the compiler.\nCreates predefined symbols used throughout the Leo …\nGives access to read or modify the session globals in <code>f</code>.")