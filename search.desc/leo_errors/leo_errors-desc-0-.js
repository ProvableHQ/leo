searchState.loadedDescShard("leo_errors", 0, "leo-errors\nContains the common functionalities for defining errors.\nA macro that given an enum, exit code mask, error code …\nContains traits and types for channels through which …\nContains the errors and warnings for the Leo language.\nThis module contains a backtraced error and its methods.\nThis module contains a formatted error and its methods.\nThis module contains the macros for making errors easily.\nThis module contains traits for making errors easily.\nBacktraced compiler output type undefined value <code>x</code> –&gt; …\nThe indent for an error message.\nThe backtrace representing where the error occurred in Leo.\nThe error exit code.\nThe error leading digits identifier.\nIs this Backtrace a warning or error?\nGets a unique error identifier.\nGets the backtraced error exit code.\nReturns the argument unchanged.\nThe error help message if it exists.\nCalls <code>U::from(self)</code>.\nThe error message.\nCreates a backtraced error from a backtrace.\nThe characters representing the type of error.\nGets a unique warning identifier.\nFormatted compiler error type undefined value <code>x</code> –&gt; …\nThe backtrace to track where the Leo error originated.\nReturns an error identifier.\nCalls the backtraces error exit code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a backtraced error from a span and a backtrace.\nThe formatted error span information.\nReturns an warning identifier.\nMessageCode trait that all Errors should implement.\nThe LeoErrorCode which has a default code identifier of 037\nReturns the messages’s exit code mask, as to avoid …\nReturns the prefixed error identifier.\nReturns the error’s exit code for the program.\nReturns if the message is an error or warning.\nReturns the message’s code type for the program.\nReturns the prefixed warning identifier.\nA buffer of <code>T</code>s.\nAn <code>Emitter</code> that collects into a list.\nTypes that are sinks for compiler errors.\nA buffer of <code>LeoError</code>s.\nA handler deals with errors and other compiler output.\nContains the actual data for <code>Handler</code>. Modelled this way to …\nA trivial <code>Emitter</code> using the standard error.\nA buffer of <code>LeoWarning</code>s.\nEmit the error <code>err</code>.\nEmit the error <code>err</code>.\nEmit the error <code>err</code>.\nEmit the warning.\nEmit the error <code>err</code>.\nEmit the error <code>err</code>.\nThe sink through which errors will be emitted.\nThe number of errors thus far.\nNumber of errors emitted thus far.\nExtend handler with <code>error</code> given <code>res = Err(error)</code>.\nExtracts all the errors collected in this emitter.\nExtracts all the errors collected in this emitter.\nEmits the error <code>err</code>. This will immediately abort …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDid we have any errors thus far?\nThe inner handler. <code>RefCell</code> is used here to avoid <code>&amp;mut</code> all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the underlying list of Ts.\nTracks last emitted error.\nGets the last emitted error’s exit code.\nLast entry to the buffer.\nGets the last emitted error’s exit code if it exists. …\nExit code of the last emitted error.\nConstruct a <code>Handler</code> using the given <code>emitter</code>.\nReturns a new buffered emitter.\nConstruct a <code>Handler</code> that will append to <code>buf</code>.\nPush <code>x</code> to the buffer.\nNumber of warnings emitted thus far.\nThe number of warnings thus far.\nRuns <code>logic</code> provided a handler that collects all errors …\nAnyhow errors.\nRepresents an AST Error in a Leo Error.\nRepresents a CLI Error in a Leo Error.\nRepresents a Compiler Error in a Leo Error.\nContains the error value\nRepresents a Flatten Error in a Leo Error.\nPurely for just exiting with the correct status code and …\nThe LeoError type that contains all sub error types. This …\nThe LeoWarning type that contains all sub warning types. …\nRepresents a Loop Unroller Error in a Leo Error.\nContains the success value\nRepresents a Package Error in a Leo Error.\nRepresents a Parser Error in a Leo Error.\nRepresents an Parser Warning in a Leo Warning.\nA global result type for all Leo crates, that defaults the …\nRepresents a Type Checker Error in a Leo Error.\nRepresents a Type Checker Warning in a Leo Warning.\nRepresents a Utils Error in a Leo Error.\nContains the AST error definitions.\nContains the CLI error definitions.\nContains the Compiler error definitions.\nImplement error code for each type of Error.\nImplement warning code for each type of Warning.\nImplement exit code for each type of Error.\nContains the Flattener error definitions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the Loop Unroller error definitions.\nContains the Package error definitions.\nContains the Parser error definitions.\nContains the Type Checker error definitions.\nContains the Utils error definitions.\nThis module contains the AST error definitions.\nAstError enum that represents all the errors for the …\nFor when the AST fails to be represented as a JSON string.\nFor when the AST fails to be represented as a JSON value.\nFor when the symbol table fails to be represented as a …\nFor when the symbol table fails to be represented as a …\nFor when the AST fails to create the AST JSON file.\nFor when the symbol table fails to create the symbol table …\nFor when the a JSON files fails to be represented as an …\nFor when the a JSON string fails to be represented as an …\nFor when the a JSON string fails to be represented as an …\nFor when the AST fails to write the AST JSON file.\nFor when the symbol table fails to write the symbol table …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFor when a user shadows a function.\nFor when a user shadows a record.\nFor when a user shadows a struct.\nFor when a user shadows a variable.\nThis module contains the CLI error definitions.\nCliError enum that represents all the errors for the …\nFor when the CLI is given invalid user input.\nFor when the CLI experiences an IO error.\nFor when the CLI fails to run something\nFor when the CLI could not fetch the versions.\nFor when the CLI fails to enable ansi support.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFor when the CLI has an old release version.\nFor when the CLI fails to self update.\nFor when the CLI fails to self update.\nThis module contains the Compiler error definitions.\nCompilerError enum that represents all the errors for the …\nFor when the compiler can’t read a file from the …\nReturns the argument unchanged.\nFor when a user tries to assign to a struct static member.\nCalls <code>U::from(self)</code>.\nThis module contains the Flattener error definitions.\nCliError enum that represents all the errors for the …\nFor when a constant operation would cause an overflow.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFor when a loop uses a negative value.\nGenerates the type name of a value.\nFor when a u128 value cannot be converted into an i128.\nFor when a constant operation would cause an overflow.\nThis module contains the Input error definitions.\nLoopUnrollerError enum that represents all the errors for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the Package error definitions.\nPackageError enum that represents all the errors for the …\nFor when opening a directory failed.\nFor when creating a directory failed.\nFor when creating the inputs directory failed.\nFor when creating the source directory failed.\nFor when getting a input file entry failed.\nFor when getting the input file type failed.\nFor when getting a Leo file entry failed.\nFor when getting the source file extension failed.\nFor when the package failed to initialize.\nFor when reading the checksum file failed.\nFor when reading the struct file failed.\nFor when file could not be read.\nFor when reading the input file failed.\nFor when reading the input directory failed.\nFor when reading the snapshot file failed.\nFor when removing the checksum file failed.\nFor when removing the struct file failed.\nFor when removing a directory failed.\nFor when removing the snapshot file failed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFor when getting the input file has an invalid file type.\nFor when the Leo file has an invalid extension.\nFor when the package has an invalid name.\nFor when the checksum file has an IO error.\nFor when the struct file has an IO error.\nFor when the environment file has an IO error.\nFor when the gitignore file has an IO error.\nFor when the input file has an IO error.\nFor when the main file has an IO error.\nThis module contains the Parser error definitions.\nThis module contains the Parser warning definitions.\nParserError enum that represents all the errors for the …\nEnforce that cannot use import in program scope\nFor when the parser encountered a member declaration not …\nWhen the lexer could not lex some text.\nReturns the argument unchanged.\nWhen the user tries to pass an implicit value.\nFor when a user specified more than one mode on a …\nCalls <code>U::from(self)</code>.\nFor when the parser encountered an invalid address literal.\nFor when the parser encountered an empty import list.\nParsed an unknown method call on the type of an expression.\nFor when the lexer encountered a bidi override character\nWhen a block comment is not closed before end of file.\nWhen a block comment is empty.\nWhen more input was expected but not found.\nWhen an integer is started with a leading zero.\nWhen a hex number is provided.\nWhen a string is not properly closed.\nFor when the parser encountered a mix of commas and …\nFor when the parser encountered an unexpected spread in an …\nEnforce that tuple index must not have leading 0, or …\nFor when the parser encountered an unexpected list of …\nFor when the parser encountered an unexpected End of File.\nFor when the parser encountered an unexpected identifier.\nFor when the parser encountered an unexpected statement.\nFor when the parser encountered an unexpected string.\nFor when the parser encountered an unexpected token.\nFor when the parser encountered an unexpected whitespace.\nParserWarning enum that represents all the warnings for …\nFor when a user used const on a parameter or input instead …\nFor when a keyword is deprecated but could be used as a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the Input error definitions.\nInputError enum that represents all the errors for the …\nFor when the user tries to assign to a const input.\nFor when the user tries to assign to a const input.\nFor when a struct is created with the same name as a core …\nFor when the type checker cannot determine the type of an …\nAttempted to define more that one record variable with the …\nAttempted to define more that one struct member with the …\nFor when one of the following types was expected.\nReturns the argument unchanged.\nFor when a function doesn’t have a return statement.\nFor when the user tries calls a function with the …\nFor when the user tries initialize a struct with the …\nCalls <code>U::from(self)</code>.\nFor when the parser encountered an invalid assignment …\nA call to an invalid associated constant is made e.g., …\nFor when an invalid field of block is called.\nFor when an invalid core constant is called.\nFor when an invalid core function is used.\nAn invalid access call is made e.g., `SHA256::hash()\nFor when an integer is not in a valid range.\nAttempted to access an invalid struct variable.\nFor when the user is missing a struct member during …\nFor when the user tries to assign to a const input.\nAttempted to access an invalid struct.\nFor when the user tries to return a unknown variable.\nParserWarning enum that represents all the warnings for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the Input error definitions.\nInputError enum that represents all the errors for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")