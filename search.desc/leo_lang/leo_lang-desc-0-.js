searchState.loadedDescShard("leo_lang", 0, "Table of Contents\nCommands to manage Aleo accounts.\nAdd a new on-chain or local dependency to the current …\nCompile and build program command.\nCompiler Options wrapper for Build command. Also used by …\nCLI Arguments entry point - includes global parameters and …\nClean outputs folder command\nBase trait for the Leo CLI, see methods and their …\nDeploys an Aleo program.\nInitialize a new Leo example.\nBuild, Prove and Run Leo program with inputs\nOn Chain Execution Options to set preferences for keys, …\nDerive an Aleo account from a private key.\nIf the current command requires running another command …\nCreate new Leo project\nGenerates a new Aleo account\nDefines the output of this command, which may be used as …\nQuery live data from the Aleo network.\nRemove a dependency from the current package.\nBuild, Prove and Run Leo program with inputs\nSign a message using your Aleo private key.\nUpdate Leo to the latest version\nVerify a message from an Aleo address.\nRuns the main operation of this command. This function is …\nLists all available versions of Leo\nParses the record string. If the string is a ciphertext, …\nRuns the prelude and returns the Input of the current …\nSuppress outputs to terminal\nRun command with custom build arguments.\nAddress to use for verification\nPrint sensitive information (such as private key) …\nPrint sensitive information (such as private key) …\nMessage (Aleo value) to sign\nMessage (Aleo value) to verify the signature against\nPrivate key plaintext\nSpecify the account private key of the node\nSpecify the path to a file containing the account private …\nWhen enabled, parses the message as bytes instead of Aleo …\nWhen enabled, parses the message as bytes instead of Aleo …\nSeed the RNG with a numeric value.\nSignature to verify\nWrite the private key to the .env file.\nWrite the private key to the .env file.\nCommands to manage Aleo accounts.\nDerive an Aleo account from a private key.\nGenerates a new Aleo account\nSign a message using your Aleo private key.\nVerify a message from an Aleo address.\nAddress to use for verification\nPrint sensitive information (such as private key) …\nPrint sensitive information (such as private key) …\nMessage (Aleo value) to sign\nMessage (Aleo value) to verify the signature against\nPrivate key plaintext\nSpecify the account private key of the node\nSpecify the path to a file containing the account private …\nWhen enabled, parses the message as bytes instead of Aleo …\nWhen enabled, parses the message as bytes instead of Aleo …\nSeed the RNG with a numeric value.\nSignature to verify\nWrite the private key to the .env file.\nWrite the private key to the .env file.\nAdd a new on-chain or local dependency to the current …\nCompile and build program command.\nClean outputs folder command\nCLI Arguments entry point - includes global parameters and …\nLeo compiler and package manager\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun command with custom build arguments.\nCompiler Options wrapper for Build command. Also used by …\nBase trait for the Leo CLI, see methods and their …\nOn Chain Execution Options to set preferences for keys, …\nIf the current command requires running another command …\nDefines the output of this command, which may be used as …\nRuns the main operation of this command. This function is …\nA wrapper around the <code>apply</code> method. This function sets up …\nA wrapper around the <code>apply</code> method. This function sets up …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermine if the transaction should be broadcast or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds a span to the logger via <code>tracing::span</code>. Because of …\nAdds a span to the logger via <code>tracing::span</code>. Because of …\nParses the record string. If the string is a ciphertext, …\nRuns the prelude and returns the Input of the current …\nExecutes command but empty the result. Comes in handy …\nExecutes command but empty the result. Comes in handy …\nCommands to manage Aleo accounts.\nDerive an Aleo account from a private key.\nGenerates a new Aleo account\nSign a message using your Aleo private key.\nVerify a message from an Aleo address.\nPrint the string to an alternate screen, so that the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAddress to use for verification\nPrint sensitive information (such as private key) …\nPrint sensitive information (such as private key) …\nMessage (Aleo value) to sign\nMessage (Aleo value) to verify the signature against\nPrivate key plaintext\nSpecify the account private key of the node\nSpecify the path to a file containing the account private …\nWhen enabled, parses the message as bytes instead of Aleo …\nWhen enabled, parses the message as bytes instead of Aleo …\nSeed the RNG with a numeric value.\nSignature to verify\nWrite the private key to the .env file.\nWrite the private key to the .env file.\nAdd a new on-chain or local dependency to the current …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCompile and build program command.\nCompiles a Leo file in the <code>src/</code> directory.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClean outputs folder command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeploys an Aleo program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitialize a new Leo example.\nThe example programs that can be generated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild, Prove and Run Leo program with inputs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA helper function to recursively load the program and all …\nCreate new Leo project\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery live data from the Aleo network.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery the committee.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery program source code and live mapping values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery the latest stateroot.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery transaction information.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemove a dependency from the current package.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuild, Prove and Run Leo program with inputs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUpdate Leo to the latest version\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLists all available versions of Leo\nSuppress outputs to terminal\nProject context, manifest, current directory etc All the …\nPath to use for the Aleo registry, None when default\nPath at which the command is called, None when default\nRecursive flag.\nDeploys an Aleo program.\nInitialize a new Leo example.\nThe example programs that can be generated.\nBuild, Prove and Run Leo program with inputs\nProject context, manifest, current directory etc All the …\nReturns the path to the Leo package.\nReturns the endpoint from the .env file specified in the …\nReturns the network from the .env file specified in the …\nReturns the private key from the .env file specified in …\nReturns the argument unchanged.\nReturns the endpoint to interact with the network. If the …\nReturns the network name. If the <code>--network</code> options is not …\nReturns the private key. If the <code>--private-key</code> options is …\nReturns the path to the Aleo registry directory.\nPath to use for the Aleo registry, None when default\nCalls <code>U::from(self)</code>.\nReturns a post ordering of the local dependencies. Found …\nReturns the package name as a String. Opens the manifest …\nReturns the path of the parent directory to the Leo …\nPath at which the command is called, None when default\nRecursive flag.\nReturns the argument unchanged.\nInitialize logger with custom format and verbosity.\nCalls <code>U::from(self)</code>.\nEnable ANSI terminal colors for formatted output.\nSets whether or not an event’s level is displayed.\nSets whether or not an event’s target is displayed.\nSets whether or not the thread ID of the current thread is …\nSets whether or not the name of the current thread is …\nUse the given <code>timer</code> for log message timestamps.\nDo not emit timestamps with log messages.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDisplay the CLI message, if the Leo configuration allows.\nShow all available releases for <code>leo</code>.\nCheck if there is an available update for <code>leo</code> and return …\nUpdate <code>leo</code> to the latest release.\nInitialize logger with custom format and verbosity.\nCreate new Leo project\nQuery program source code and live mapping values.\nQuery live data from the Aleo network.\nQuery program source code and live mapping values.\nRemove a dependency from the current package.\nBuild, Prove and Run Leo program with inputs\nUpdate Leo to the latest version\nLists all available versions of Leo\nSuppress outputs to terminal")