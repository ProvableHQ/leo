version: 2.1

# Notes
# - `sccache` was removed because it doesn't actually provide much benefit in CI. Lots of cache misses.
# - https://github.com/Swatinem/rust-cache?tab=readme-ov-file#cache-details provides guidance on which directories to cache.
# - Incremental builds should be disabled in CI, since they don't provide much benefit.
# - Enabling `--only_testnet` feature flag to reduce the amount of time spent building leo-lang, since it's not needed for the test suite.

# Rust Version: 1.82.0
# Ensure that this matches the `rust-version` in `Cargo.toml`.
# If this is changed, propogate the changes to all places in this file, including the `install-rust` command.

# TODO:
#  - The cache size can accumulate as the dependencies get upgraded. Ideally you want some pruning before the cache gets persisted.
#    See swatinem/rust-cache for a sensible approach. Unfortunately, we'd have to build this for CircleCI.
#  - Rust v1.83.0 is coming with some sensible cargo rebuild improvements. We should upgrade to that when it's released.


environment:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-D warnings"


orbs:
  windows: circleci/windows@5.0

executors:
  macos-executor:
    macos:
      xcode: "16.0.0"  # Use appropriate Xcode version
    resource_class: m2pro.large

  linux-executor:
    docker:
      - image: "cimg/rust:1.82.0"  # Ensure that this matches the `rust-version` in `Cargo.toml`.
    resource_class: xlarge


commands:
  install-rust:
    description: "Install Rust (Linux/macOS)"
    steps:
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source "$HOME/.cargo/env"
            rustup install 1.82.0
            rustup override set 1.82.0
            cargo --version --verbose
            rustc --version
            if [ ! -f "Cargo.lock" ]; then
              cargo generate-lockfile
            fi
            git submodule update --init --recursive

  install-rust-windows:
    description: "Install Rust (Windows)"
    steps:
      - run:
          name: Install Rust (Windows)
          command: |
            $ProgressPreference = "SilentlyContinue"
            choco uninstall rust
            Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "C:\\rustup-init.exe"
            Start-Process "C:\\rustup-init.exe" -ArgumentList '-y' -Wait
            $Env:Path += ";$Env:USERPROFILE\.cargo\bin"
            rustup install 1.82.0
            rustup default 1.82.0
            cargo --version --verbose
            rustc --version | Out-File -FilePath "rust-version"
            if (!(Test-Path "Cargo.lock" -PathType Leaf)) {
                cargo generate-lockfile
            }
            git submodule update --init --recursive

  build-and-test:
    description: "Build and run tests"
    steps:
      - run:
          name: Build
          no_output_timeout: 30m
          command: |
            cargo test --no-run --all --locked --profile ci --features only_testnet
      - run:
          name: Run tests
          no_output_timeout: 30m
          # The `--verbose` flag is used to check which files are being recompiled. Ideally, this should be none.
          command: |
            cargo test --all --locked --profile ci --features only_testnet --verbose

  setup_environment:
    description: "Setup environment"
    parameters:
      cache_key:
        type: string
        default: leo-stable-linux-cache
    steps:
      - run: set -e
      - setup_remote_docker
      - run:
          name: Prepare environment and install dependencies
          command: |
            export SCCACHE_CACHE_SIZE=200M
            export WORK_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            export SCCACHE_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            mkdir -p "$CIRCLE_WORKING_DIRECTORY/.bin"
            wget https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-dist-v0.8.2-x86_64-unknown-linux-musl.tar.gz
            tar -C "$CIRCLE_WORKING_DIRECTORY/.bin" -xvf sccache-dist-v0.8.2-x86_64-unknown-linux-musl.tar.gz
            mv $CIRCLE_WORKING_DIRECTORY/.bin/sccache-dist-v0.8.2-x86_64-unknown-linux-musl/sccache-dist $CIRCLE_WORKING_DIRECTORY/.bin/sccache
            export PATH="$PATH:$CIRCLE_WORKING_DIRECTORY/.bin"
            export RUSTC_WRAPPER="sccache"
            rm -rf "$CIRCLE_WORKING_DIRECTORY/.cargo/registry"
            sudo apt-get update && sudo apt-get install -y clang llvm-dev llvm pkg-config xz-utils make libssl-dev libssl-dev
      - restore_cache:
          keys:
            - << parameters.cache_key >>

  clear_environment:
    description: "Clear environment"
    parameters:
      cache_key:
        type: string
        default: leo-stable-linux-cache
    steps:
      - run: (sccache -s||true)
      - run: set +e
      - save_cache:
          key: << parameters.cache_key >>
          paths:
            - .cache/sccache
            - .cargo

  install_rust_nightly:
    description: "Install Rust nightly toolchain"
    steps:
      - run: rustup toolchain install nightly-x86_64-unknown-linux-gnu

jobs:
  test-windows:
    executor:
      name: windows/default
      size: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
            - cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-v1-{{ arch }}
      - install-rust-windows
      - build-and-test
      - save_cache:
          key: cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - C:\Users\circleci\.cargo
            - target

  test-macos:
    executor: macos-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
            - cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-v1-{{ arch }}
      - install-rust
      - build-and-test
      - save_cache:
          key: cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo
            - target

  test-ubuntu:
    executor: linux-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
            - cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}
            - cargo-v1-{{ arch }}
      - install-rust
      - build-and-test
      - save_cache:
          key: cargo-v1-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo
            - target

  check-style:
    docker:
      - image: cimg/rust:1.82
    resource_class: xlarge
    steps:
      - checkout
      - install_rust_nightly
      - setup_environment:
          cache_key: leo-fmt-cache
      - run:
          name: Update Submodules
          command: git submodule update --init --recursive
      - run:
          name: Check style
          no_output_timeout: 35m
          command: cargo +nightly fmt --all -- --check
      - clear_environment:
          cache_key: leo-fmt-cache

  clippy:
    docker:
      - image: cimg/rust:1.82
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: leo-clippy-cache
      - run:
          name: Update Submodules
          command: git submodule update --init --recursive
      - run:
          name: Clippy
          no_output_timeout: 35m
          command: |
            cargo clippy --workspace --all-targets -- -D warnings
            cargo clippy --workspace --all-targets --all-features -- -D warnings
      - clear_environment:
          cache_key: leo-clippy-cache

  leo-executable:
    docker:
      - image: cimg/rust:1.82
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: leo-executable-cache
      - run:
          name: Update Submodules
          command: git submodule update --init --recursive
      - run:
          name: Build and install Leo
          no_output_timeout: 30m
          command: cargo install --path . --root . --locked
      - persist_to_workspace:
          root: ~/
          paths:
            - project/
      - clear_environment:
          cache_key: leo-executable-cache

  leo-new:
    docker:
      - image: cimg/rust:1.82
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: /home/circleci/project/
      - run:
          name: leo new
          command: |
            export LEO=/home/circleci/project/project/bin/leo
            timeout 30m ./project/.circleci/leo-new.sh

  leo-clean:
    docker:
      - image: cimg/rust:1.82
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: /home/circleci/project/
      - run:
          name: leo clean
          command: |
            export LEO=/home/circleci/project/project/bin/leo
            ./project/.circleci/leo-clean.sh

  leo-example:
    docker:
      - image: cimg/rust:1.82
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: /home/circleci/project/
      - run:
          name: leo example
          command: |
            export LEO=/home/circleci/project/project/bin/leo
            ./project/.circleci/leo-example.sh

  test-examples:
    docker:
      - image: cimg/rust:1.82
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: /home/circleci/project/
      - run:
          name: test examples example
          command: |
            export LEO=/home/circleci/project/project/bin/leo
            export EXAMPLES=/home/circleci/project/project/examples
            ./project/.circleci/test-examples.sh

workflows:
  version: 2
  main-workflow:
    jobs:
      - test-windows
      - test-macos
      - test-ubuntu
      - check-style
      - clippy
      - leo-executable
      - leo-new:
          requires:
            - leo-executable
      - leo-clean:
          requires:
            - leo-executable
      - leo-example:
          requires:
            - leo-executable
      - test-examples:
          requires:
            - leo-executable
