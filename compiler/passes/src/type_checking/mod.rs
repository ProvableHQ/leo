// Copyright (C) 2019-2023 Aleo Systems Inc.
// This file is part of the Leo library.

// The Leo library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Leo library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with the Leo library. If not, see <https://www.gnu.org/licenses/>.

mod await_checker;

pub mod check_expressions;

pub mod check_program;

pub mod check_statements;

pub mod checker;

mod scope_state;

pub use checker::*;

use crate::{CallGraph, Pass, StructGraph, SymbolTable, TypeTable};

use leo_ast::{Ast, ProgramVisitor};
use leo_errors::{emitter::Handler, Result};

use snarkvm::prelude::Network;

impl<'a, N: Network> Pass for TypeChecker<'a, N> {
    type Input = (&'a Ast, &'a Handler, SymbolTable, &'a TypeTable, usize, bool);
    type Output = Result<(SymbolTable, StructGraph, CallGraph)>;

    fn do_pass((ast, handler, st, tt, max_depth, await_checking): Self::Input) -> Self::Output {
        // get program name without consuming AST
        let program_name = &ast
            .ast
            .program_scopes
            .keys()
            .next()
            .map(|s| s.to_string())
            .unwrap_or_else(|| "Unknown program".to_string());

        let mut visitor = TypeChecker::<N>::new(st, tt, handler, max_depth, await_checking);
        visitor.visit_program(ast.as_repr());

        // color codes for terminal
        const RED: &str = "\x1b[31m";
        const YELLOW: &str = "\x1b[33m";
        const RESET: &str = "\x1b[0m";

        // get error and warning counts from handler
        let inner = handler.inner.borrow();
        let err_count = inner.err_count;
        let warn_count = inner.warn_count;

        // if there is at least one error or warning, add two empty lines before report
        if err_count + warn_count > 0 {
            println!("\n");
        }

        // show warning counts
        if warn_count > 0 {
            println!(
                "{}warning{}: {}.leo generated {} warning{}",
                YELLOW,
                RESET,
                program_name,
                warn_count,
                if warn_count > 1 { "s" } else { "" }
            );
        }

        //show error counts, if warnings emitted include them as well.
        if err_count > 0 {
            let error_message = format!(
                "{}error{}: could not compile {}.leo due to {} previous error{}",
                RED,
                RESET,
                program_name,
                err_count,
                if err_count > 1 { "s" } else { "" }
            );
            if warn_count > 0 {
                println!("{}; {} warning{} emitted", error_message, warn_count, if warn_count > 1 { "s" } else { "" });
            } else {
                println!("{}", error_message);
            }
        }

        handler.last_err().map_err(|e| *e)?;

        // Remove unused structs from the struct graph.
        // This prevents unused struct definitions from being included in the generated bytecode.
        visitor.struct_graph.retain_nodes(&visitor.used_structs);
        Ok((visitor.symbol_table.take(), visitor.struct_graph, visitor.call_graph))
    }
}
